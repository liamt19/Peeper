<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net10.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <InvariantGlobalization>true</InvariantGlobalization>
    <Platforms>x64</Platforms>

    <DebugType>embedded</DebugType>
    <ProduceReferenceAssembly>False</ProduceReferenceAssembly>
    <GenerateDocumentationFile>False</GenerateDocumentationFile>
    <GenerateAssemblyInfo>True</GenerateAssemblyInfo>
    <GenerateDependencyFile>False</GenerateDependencyFile>
    
    <BaseOutputPath>bin</BaseOutputPath>
    <AppendTargetFrameworkToOutputPath>False</AppendTargetFrameworkToOutputPath>
    <AppendRuntimeIdentifierToOutputPath>False</AppendRuntimeIdentifierToOutputPath>
    
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
    <LangVersion>preview</LangVersion>
    <EnablePreviewFeatures>True</EnablePreviewFeatures>

    <PublishAot>true</PublishAot>
    
    <TieredPGO>true</TieredPGO>
    <TieredCompilation>true</TieredCompilation>
    <PublishReadyToRun>true</PublishReadyToRun>
    <TieredCompilationQuickJit>true</TieredCompilationQuickJit>
    <TieredCompilationQuickJitForLoops>true</TieredCompilationQuickJitForLoops>
    <Configurations>Debug;Release;ReleaseChecked</Configurations>

  </PropertyGroup>



  <!-- The "instruction-set" argument is required for AOT to generate code with intrinsics -->
  <ItemGroup>
    <ilcArg Include="--Ot" />
    <IlcArg Condition="$(IlcInstructionSet) == ''" Include="--instruction-set=native" />
  </ItemGroup>


  <!-- Network files are stored with the .nnue extension in the network repository.
       If an EVALFILE isn't explicitly given, then we'll try to download the file from the repository, and append .nnue to the name given in network.txt
  -->
  <PropertyGroup>
    <EFileExt></EFileExt>
  </PropertyGroup>


  <!-- PreBuildEvent is early enough that the EmbedNetworkFile target works properly
       but late enough that VS doesn't constantly try to download the file
  -->
  <Target Name="SetEvalFile" BeforeTargets="PreBuildEvent" Condition="'$(EVALFILE)' == ''">
    <PropertyGroup>
      <EVALFILE>$([System.IO.File]::ReadAllText($(MSBuildThisFileDirectory)network.txt))</EVALFILE>
    </PropertyGroup>

    <CreateProperty Value=".nnue">
      <Output TaskParameter="Value" PropertyName="EFileExt" />
    </CreateProperty>

    <Message Text="EVALFILE set to $(EVALFILE)" Importance="high" />
  </Target>


  <!-- PreBuildEvent is early enough that the EmbedNetworkFile target works properly
       but late enough that VS doesn't constantly try to download the file
  -->
  <Target Name="DownloadNetworkFiles" AfterTargets="SetEvalFile" Condition="!Exists('$(EVALFILE)$(EFileExt)')">
    <PropertyGroup>
      <NetworkFileURL>https://github.com/liamt19/peeper-nets/releases/download/$(EVALFILE)/$(EVALFILE)$(EFileExt)</NetworkFileURL>
    </PropertyGroup>

    <Message Text="Downloading $(NetworkFileURL) into $(MSBuildThisFileDirectory)" Importance="high" />

    <DownloadFile SourceUrl="$(NetworkFileURL)" DestinationFolder="$(MSBuildThisFileDirectory)">
      <Output TaskParameter="DownloadedFile" ItemName="Content" />
    </DownloadFile>
  </Target>


  <!-- Embed the file here, after reading network.txt (if EVALFILE wasn't provided) and downloading it (if necessary).
       Also set EvalFileAttribute so we know what the file is named
  -->
  <Target Name="EmbedNetworkFile" AfterTargets="DownloadNetworkFiles;SetEvalFile">
    <Message Text="Embedding $(EVALFILE)$(EFileExt) as a resource" Importance="high" />

    <ItemGroup>
      <EmbeddedResource Include="$(EVALFILE)$(EFileExt)" />
    </ItemGroup>

    <ItemGroup>
      <AssemblyAttribute Include="Peeper.Logic.Util.EvalFileAttribute">
        <_Parameter1>$(EVALFILE)$(EFileExt)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>


  <!-- Handle Horsie bindings and AOT -->
  <ItemGroup>
    <EmbeddedResource Condition="'$(BINDINGS)' != '' AND Exists('$(BINDINGS)')" Include="$(BINDINGS)" />
  </ItemGroup>


</Project>
